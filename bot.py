import logging
import asyncio
import os
from aiogram import Bot, Dispatcher
from aiogram.types import Message
from aiogram.enums import ParseMode
from aiogram.filters import Command
from aiogram.utils.markdown import hbold
from aiogram.client.default import DefaultBotProperties
from aiogram import Router
import cloudscraper
from bs4 import BeautifulSoup
import ssl
import urllib3

urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)


# –ß—Ç–µ–Ω–∏–µ API_TOKEN –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
API_TOKEN = os.getenv("API_TOKEN")

if not API_TOKEN:
    raise ValueError("API_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")

CHECK_INTERVAL = 1800  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç

logging.basicConfig(level=logging.INFO)
bot = Bot(token=API_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher()
router = Router()
dp.include_router(router)

subscribers: set[int] = set()
last_known_value = None

def fetch_countdown_text() -> str:
    url = "https://case-battle.at/case/awpasiimov"

    # –°–æ–∑–¥–∞—ë–º –∫–∞—Å—Ç–æ–º–Ω—ã–π SSL-–∫–æ–Ω—Ç–µ–∫—Å—Ç —Å –æ—Ç–∫–ª—é—á—ë–Ω–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π
    context = ssl.create_default_context()
    context.check_hostname = False
    context.verify_mode = ssl.CERT_NONE

    # –ü–µ—Ä–µ–¥–∞—ë–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –≤ cloudscraper
    scraper = cloudscraper.create_scraper(
        ssl_context=context,
        delay=10,
        browser={"browser": "chrome", "platform": "windows", "desktop": True}
    )

    try:
        resp = scraper.get(url, timeout=15)
        resp.raise_for_status()
        soup = BeautifulSoup(resp.text, "html.parser")
        elem = soup.select_one("#case-box-app > div.countdown > div:nth-child(3)")
        return elem.get_text(strip=True) if elem else "–≠–ª–µ–º–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω"
    except Exception as e:
        return f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {e}"

@router.message(Command("start"))
async def cmd_start(msg: Message):
    subscribers.add(msg.chat.id)
    await msg.answer("‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∞–≤—Ç–æ—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–∞.\n–ù–∞–ø–∏—à–∏ /stop, —á—Ç–æ–±—ã –æ—Ç–ø–∏—Å–∞—Ç—å—Å—è.")

@router.message(Command("stop"))
async def cmd_stop(msg: Message):
    if msg.chat.id in subscribers:
        subscribers.discard(msg.chat.id)
        await msg.answer("‚ùå –ü–æ–¥–ø–∏—Å–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∞.")
    else:
        await msg.answer("–¢—ã –∏ —Ç–∞–∫ –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω üôÇ")

@router.message(Command("check"))
async def cmd_check(msg: Message):
    result = fetch_countdown_text()
    await msg.answer(f"{hbold('–†–µ–∑—É–ª—å—Ç–∞—Ç')}: {result}")

async def background_checker():
    global last_known_value
    while True:
        await asyncio.sleep(CHECK_INTERVAL)
        current_value = fetch_countdown_text()
        if current_value != last_known_value:
            last_known_value = current_value
            text = f"{hbold('–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ!')} –ù–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: {current_value}"
            for chat_id in subscribers:
                try:
                    await bot.send_message(chat_id=chat_id, text=text)
                except Exception as e:
                    logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ {chat_id}: {e}")

async def main():
    asyncio.create_task(background_checker())
    await bot.delete_webhook(drop_pending_updates=True)
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
