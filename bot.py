import os
import logging
import asyncio
from aiogram import Bot, Dispatcher, types, F
from aiogram.types import Message
from selenium.webdriver.common.by import By
import undetected_chromedriver as uc
from dotenv import load_dotenv

load_dotenv()
API_TOKEN = os.getenv("API_TOKEN")

logging.basicConfig(level=logging.INFO)
bot = Bot(token=API_TOKEN)
dp = Dispatcher()

subscribers = set()
last_value = None

async def get_countdown_text():
    try:
        options = uc.ChromeOptions()
        options.headless = True
        options.add_argument("--no-sandbox")
        options.add_argument("--disable-dev-shm-usage")

        driver = uc.Chrome(options=options)
        driver.get("https://case-battle.at/case/awpasiimov")
        driver.implicitly_wait(15)

        element = driver.find_element(By.CSS_SELECTOR, "#case-box-app > div.countdown > div:nth-child(3)")
        text = element.text.strip()

        driver.quit()
        return text
    except Exception as e:
        return f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {e}"

@dp.message(F.text == "/start")
async def cmd_start(message: Message):
    await message.answer("üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Ç–∞–π–º–µ—Ä–∞ –∫–µ–π—Å–∞.\n\n"
                         "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
                         "/check ‚Äî –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –≤—Ä—É—á–Ω—É—é\n"
                         "/subscribe ‚Äî –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è\n"
                         "/unsubscribe ‚Äî –æ—Ç–ø–∏—Å–∞—Ç—å—Å—è\n"
                         "/stop ‚Äî –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±–æ—Ç–∞")

@dp.message(F.text == "/check")
async def cmd_check(message: Message):
    text = await get_countdown_text()
    await message.answer(f"‚è± –†–µ–∑—É–ª—å—Ç–∞—Ç: {text}")

@dp.message(F.text == "/subscribe")
async def cmd_subscribe(message: Message):
    user_id = message.chat.id
    subscribers.add(user_id)
    await message.answer("‚úÖ –¢—ã –ø–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö.")

@dp.message(F.text == "/unsubscribe")
async def cmd_unsubscribe(message: Message):
    user_id = message.chat.id
    subscribers.discard(user_id)
    await message.answer("‚ùå –¢—ã –æ—Ç–ø–∏—Å–∞–Ω –æ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.")

@dp.message(F.text == "/stop")
async def cmd_stop(message: Message):
    await message.answer("‚õîÔ∏è –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")
    await bot.session.close()
    exit(0)

async def auto_check_loop():
    global last_value
    while True:
        await asyncio.sleep(60)
        text = await get_countdown_text()

        # –û–±–Ω–æ–≤–ª—è—Ç—å —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å –∏ –Ω–µ—Ç –æ—à–∏–±–∫–∏
        if "–û—à–∏–±–∫–∞" not in text and text != last_value:
            last_value = text
            for user_id in subscribers:
                try:
                    await bot.send_message(user_id, f"üîî –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {text}")
                except Exception as e:
                    logging.warning(f"‚ùóÔ∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å {user_id}: {e}")

async def main():
    asyncio.create_task(auto_check_loop())
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
