import logging
import asyncio
import os
from aiogram import Bot, Dispatcher
from aiogram.types import Message
from aiogram.enums import ParseMode
from aiogram.filters import Command
from aiogram.utils.markdown import hbold
from aiogram.client.default import DefaultBotProperties
from aiogram import Router
import urllib3
from playwright.async_api import async_playwright


urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)


# –ß—Ç–µ–Ω–∏–µ API_TOKEN –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
API_TOKEN = os.getenv("API_TOKEN")

if not API_TOKEN:
    raise ValueError("API_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")

CHECK_INTERVAL = 1800  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç

logging.basicConfig(level=logging.INFO)
bot = Bot(token=API_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher()
router = Router()
dp.include_router(router)

subscribers: set[int] = set()
last_known_value = None

async def fetch_countdown_text() -> str:
    try:
        async with async_playwright() as p:
            browser = await p.chromium.launch(headless=True, args=["--no-sandbox"])
            page = await browser.new_page()
            await page.goto("https://case-battle.at/case/awpasiimov", timeout=20000)
            
            # –ñ–¥—ë–º –ø–æ–ª–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ JS + XHR
            await page.wait_for_load_state("networkidle", timeout=20000)

            # –ñ–¥—ë–º –ø–æ—è–≤–ª–µ–Ω–∏—è –Ω—É–∂–Ω–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞
            try:
                await page.wait_for_selector("#case-box-app > div.countdown > div:nth-child(3)", timeout=20000)
                text = await page.inner_text("#case-box-app > div.countdown > div:nth-child(3)")
            except Exception:
                text = "‚ùå –≠–ª–µ–º–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –∑–∞–≥—Ä—É–∑–∫–∞ –Ω–µ –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å."

            await browser.close()
            return text
    except Exception as e:
        return f"üö® –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {e}"

@router.message(Command("start"))
async def cmd_start(msg: Message):
    subscribers.add(msg.chat.id)
    await msg.answer("‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∞–≤—Ç–æ—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–∞.\n–ù–∞–ø–∏—à–∏ /stop, —á—Ç–æ–±—ã –æ—Ç–ø–∏—Å–∞—Ç—å—Å—è.")

@router.message(Command("stop"))
async def cmd_stop(msg: Message):
    if msg.chat.id in subscribers:
        subscribers.discard(msg.chat.id)
        await msg.answer("‚ùå –ü–æ–¥–ø–∏—Å–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∞.")
    else:
        await msg.answer("–¢—ã –∏ —Ç–∞–∫ –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω üôÇ")

@router.message(Command("check"))
async def cmd_check(msg: Message):
    result = await fetch_countdown_text()
    await msg.answer(f"{hbold('–†–µ–∑—É–ª—å—Ç–∞—Ç')}: {result}")

async def background_checker():
    global last_known_value
    while True:
        await asyncio.sleep(CHECK_INTERVAL)
        current_value = await fetch_countdown_text()
        if current_value != last_known_value:
            last_known_value = current_value
            text = f"{hbold('–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ!')} –ù–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: {current_value}"
            for chat_id in subscribers:
                try:
                    await bot.send_message(chat_id=chat_id, text=text)
                except Exception as e:
                    logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ {chat_id}: {e}")

async def main():
    asyncio.create_task(background_checker())
    await bot.delete_webhook(drop_pending_updates=True)
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
